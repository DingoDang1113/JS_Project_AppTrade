/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("let tikerArr = [];\nlet purchasePrices = {};\nlet quanties = {};\nlet myChart;\nlet colorIndex = 0;\nconst colors = ['#45ffbc', '#e3ffa8', '#a6a6a6', '#f6cd61', '#aec993'];\nasync function apiFetch(symbol) {\n  const url = `https://financialmodelingprep.com/api/v3/quote/${symbol}?apikey=9d63fd6e1909cca85846e3cc209`;\n  const storedData = localStorage.getItem(`${symbol}`);\n  if (storedData) {\n    return JSON.parse(storedData);\n  }\n  try {\n    const response = await fetch(url);\n    const result = await response.json();\n    localStorage.setItem(`${symbol}`, JSON.stringify(result));\n    return result;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\nasync function apiInput(symbol, purchasePrice, quantity) {\n  const data = await apiFetch(symbol);\n  if (data.length > 0) {\n    purchasePrices[symbol] = purchasePrice;\n    quanties[symbol] = quantity;\n    localStorage.setItem('purchasePrices', JSON.stringify(purchasePrices));\n    localStorage.setItem('quantities', JSON.stringify(quanties));\n    return parseFloat(data[0].price);\n  }\n}\nconst contentDiv = document.getElementById('content');\nconst tileDiv = document.getElementById('stockTiles');\nfunction displayData(data) {\n  // console.log('display is passed with', data);\n  const stock = data[0];\n  const symbol = document.createElement('span');\n  const tile = document.createElement('div');\n  // tile.style.border = '1px solid';\n  tile.style.margin = '5px';\n  tile.style.padding = '1px';\n  tile.style.borderRadius = '8px';\n  tile.style.width = '150px';\n  tile.style.backgroundColor = colors[colorIndex % colors.length];\n  colorIndex++;\n  const info = document.createElement('span');\n\n  // conditional format\n  const percentChg = function (percent) {\n    if (percent > 0) {\n      return `⬆${percent.toFixed(2)}%`;\n    } else {\n      return `⬇${percent.toFixed(2)}%`;\n    }\n  };\n  const purchasePrice = purchasePrices[stock['symbol']];\n  const quantity = quanties[stock['symbol']];\n  const gainLoss = (stock['price'] - purchasePrice) * quantity;\n  const roi = (stock['price'] / purchasePrice - 1) * 100;\n\n  // Create separate elements for each piece of info\n  const symbolP = document.createElement('p');\n  symbolP.id = \"symbolInfo\";\n  symbolP.style.fontWeight = \"600\";\n  symbolP.textContent = `${stock['symbol']}`;\n  const priceP = document.createElement('p');\n  priceP.id = \"priceInfo\";\n  priceP.style.fontStyle = \"oblique\";\n  priceP.textContent = `$${stock['price'].toFixed(2)}`;\n  const percentChgP = document.createElement('p');\n  percentChgP.id = \"changeInfo\";\n  percentChgP.style.fontStyle = \"oblique\";\n  percentChgP.textContent = `${percentChg(stock['changesPercentage'])}`;\n  if (stock['changesPercentage'] < 0) {\n    priceP.style.color = \"red\";\n    percentChgP.style.color = 'red';\n  }\n  const gainLossP = document.createElement('p');\n  gainLossP.id = \"gainLossInfo\";\n  gainLossP.textContent = `$${gainLoss.toFixed(2)}`;\n  const roiP = document.createElement('p');\n  roiP.id = \"roiInfo\";\n  roiP.textContent = `${percentChg(roi)}`;\n  if (roi < 0) {\n    gainLossP.style.color = \"red\";\n    roiP.style.color = 'red';\n  }\n\n  //delete button\n  const deleteTile = document.createElement('button');\n  deleteTile.textContent = '-';\n  deleteTile.addEventListener('click', function () {\n    const index = tikerArr.indexOf(stock['symbol']);\n    if (index !== -1) {\n      tikerArr.splice(index, 1);\n      delete purchasePrices[stock['symbol']];\n      delete quanties[stock['symbol']];\n    }\n    tileDiv.removeChild(tile);\n    buildChart();\n    updateTotalGainLossAndROI();\n  });\n  // append \n  tile.appendChild(deleteTile);\n  tile.appendChild(info);\n  tile.appendChild(symbolP);\n  tile.appendChild(priceP);\n  tile.appendChild(percentChgP);\n  tile.appendChild(gainLossP);\n  tile.appendChild(roiP);\n  tileDiv.appendChild(tile);\n  return stock['price'];\n}\nasync function updateTotalGainLossAndROI() {\n  // Calculate total gain/loss and ROI\n  let totalGainLoss = 0;\n  let totalInvestment = 0;\n  let totalCurrentValue = 0;\n  for (const symbol of Object.keys(purchasePrices)) {\n    const data = await apiFetch(symbol);\n    if (data && data.length > 0) {\n      const currentPrice = data[0].price;\n      totalGainLoss += (currentPrice - purchasePrices[symbol]) * quanties[symbol];\n      totalInvestment += quanties[symbol] * purchasePrices[symbol];\n      totalCurrentValue += quanties[symbol] * currentPrice;\n    }\n  }\n  // console.log ('totalGainLoss', totalGainLoss) // gets back value\n\n  // Calculate ROI\n  const totalROI = (totalCurrentValue / totalInvestment - 1) * 100;\n  console.log('totalROI', totalROI);\n\n  // summary tile\n  const summaryTile = document.getElementById('summaryTile');\n  summaryTile.innerHTML = \"\";\n  // console.log(summaryTile);\n  // summaryTile.textContent = `Total Gain/Loss: $${totalGainLoss.toFixed(2)} Total ROI: ${totalROI.toFixed(2)}%`;\n\n  const summaryGl = document.createElement('p');\n  summaryGl.id = \"summaryGL\";\n  summaryGl.style.fontWeight = \"800\";\n  summaryGl.textContent = `Gain/Loss:     $${totalGainLoss.toFixed(2)}`;\n  const summaryROI = document.createElement('p');\n  summaryROI.id = \"summaryROI\";\n  summaryROI.style.marginTop = '5px';\n  summaryROI.textContent = `${totalROI.toFixed(2)}%`;\n  summaryTile.appendChild(summaryGl);\n  summaryTile.appendChild(summaryROI);\n}\nasync function onSubmitForm() {\n  const ticker = document.getElementById('ticker').value;\n  const purchasePrice = parseFloat(document.getElementById('purchasePrice').value);\n  const quantity = parseFloat(document.getElementById('quantity').value);\n  if (tikerArr.includes(ticker)) {\n    console.log('This ticker is already added');\n    return;\n  }\n  document.getElementById('estimatorForm').style.backgroundColor = '#e3ffa8';\n  const currentPrice = await apiInput(ticker, purchasePrice, quantity);\n  if (currentPrice && ticker.trim() !== '') {\n    const gainLoss = (currentPrice - purchasePrice) * quantity;\n    const roi = (currentPrice / purchasePrice - 1).toFixed(2) * 100;\n    tikerArr.push(ticker);\n    await printTile(); // Display the tile\n    await updateTotalGainLossAndROI();\n  } else {\n    console.log('failed to fetch current price');\n  }\n}\nfunction printTile() {\n  // render all tiles\n  document.getElementById('stockTiles').innerHTML = \"\";\n  while (tileDiv.firstChild) {\n    tileDiv.removeChild(tileDiv.firstChild);\n  }\n  tikerArr?.forEach(ticker => {\n    let tickerData = JSON.parse(localStorage.getItem(ticker));\n    displayData(tickerData);\n  });\n  buildChart();\n}\nasync function buildChart() {\n  if (myChart) {\n    myChart.destroy();\n  }\n  let tickers = tikerArr;\n  let gainLosses = [];\n  let labels = [];\n  const purchasePrices = JSON.parse(localStorage.getItem('purchasePrices'));\n  const quanties = JSON.parse(localStorage.getItem('quantities'));\n  for (let i = 0; i < tickers.length; i++) {\n    let tickerData = JSON.parse(localStorage.getItem(tickers[i]));\n    if (tickerData && tickerData.length > 0) {\n      let currentPrice = tickerData[0].price;\n      let purchasePrice = purchasePrices[tickers[i]];\n      let quantity = quanties[tickers[i]];\n      let gainLoss = (currentPrice - purchasePrice) * quantity;\n      labels.push(tickerData[0].symbol);\n      gainLosses.push(gainLoss);\n    }\n  }\n  const ctx = document.getElementById('myChart').getContext('2d');\n  // ctx.canvas.width = 100;\n  // ctx.canvas.height = 200;\n\n  myChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Gain/Loss in USD',\n        data: gainLosses,\n        backgroundColor: 'rgba(180,255,228,1)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      // maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    },\n    backgroundColor: 'black'\n  });\n}\nprintTile();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;