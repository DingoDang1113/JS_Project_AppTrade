{"version":3,"file":"main.js","mappings":"YAAA,IAGIA,EAHAC,EAAW,GACXC,EAAiB,CAAC,EAClBC,EAAW,CAAC,EAEZC,EAAa,EACjB,MAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAU,WAE3DC,eAAeC,EAASC,GACtB,MAAMC,EAAO,kDAAiDD,uCAExDE,EAAaC,aAAaC,QAAS,GAAEJ,KAC3C,GAAIE,EACF,OAAOG,KAAKC,MAAMJ,GAIpB,IACE,MAAMK,QAAiBC,MAAMP,GACvBQ,QAAeF,EAASG,OAE9B,OADAP,aAAaQ,QAAS,GAAEX,IAAUK,KAAKO,UAAUH,IAC1CA,CACT,CAAE,MAAMI,GAEN,OADAC,QAAQD,MAAMA,GACP,IACT,CACF,CAamBE,SAASC,eAAe,WAA3C,MACMC,EAAUF,SAASC,eAAe,cAgLxClB,eAAeoB,IACV1B,GACDA,EAAQ2B,UAGV,IAAIC,EAAU3B,EACV4B,EAAa,GACbC,EAAS,GACb,MAAM5B,EAAiBW,KAAKC,MAAMH,aAAaC,QAAQ,mBACjDT,EAAWU,KAAKC,MAAMH,aAAaC,QAAQ,eAEjD,IAAK,IAAImB,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAAK,CACvC,IAAIE,EAAapB,KAAKC,MAAMH,aAAaC,QAAQgB,EAAQG,KACzD,GAAIE,GAAcA,EAAWD,OAAS,EAAG,CACvC,IAGIE,GAHeD,EAAW,GAAGE,MACbjC,EAAe0B,EAAQG,KAC5B5B,EAASyB,EAAQG,IAEhCD,EAAOM,KAAKH,EAAW,GAAGzB,QAC1BqB,EAAWO,KAAKF,EAClB,CACF,CAEA,MAAMG,EAAMd,SAASC,eAAe,WAAWc,WAAW,MAI1DtC,EAAU,IAAIuC,MAAMF,EAAK,CACvBG,KAAM,MACNC,KAAM,CACJX,OAAQA,EACRY,SAAU,CAAC,CACTC,MAAO,mBACPF,KAAMZ,EACNe,gBAAiB,sBACjBC,YAAY,qBACZC,YAAa,KAGjBC,QAAS,CACPC,YAAY,EAEZC,OAAQ,CACNC,EAAG,CACDC,aAAa,KAInBP,gBAAgB,SAEpB,EA9DA,WAEI,IADArB,SAASC,eAAe,cAAc4B,UAAY,GAC3C3B,EAAQ4B,YACb5B,EAAQ6B,YAAY7B,EAAQ4B,YAE9BpD,GAAUsD,SAAUC,KAvKxB,SAAqBf,GAEnB,MAAMgB,EAAQhB,EAAK,GAEbiB,GADSnC,SAASoC,cAAc,QACzBpC,SAASoC,cAAc,QAEpCD,EAAKE,MAAMC,OAAS,MACpBH,EAAKE,MAAME,QAAS,MACpBJ,EAAKE,MAAMG,aAAe,MAC1BL,EAAKE,MAAMI,MAAQ,QACnBN,EAAKE,MAAMhB,gBAAkBvC,EAAOD,EAAaC,EAAO2B,QACxD5B,IACA,MAAM6D,EAAO1C,SAASoC,cAAc,QAG9BO,EAAa,SAAUC,GAC3B,OAAIA,EAAU,EACJ,IAAGA,EAAQC,QAAQ,MAEnB,IAAGD,EAAQC,QAAQ,KAE/B,EAGMC,EAAgBnE,EAAeuD,EAAc,QAC7Ca,EAAWnE,EAASsD,EAAc,QAClCvB,GAAauB,EAAa,MAAIY,GAAiBC,EAC/CC,EAA2C,KAApCd,EAAa,MAAEY,EAAgB,GAGtCG,EAAUjD,SAASoC,cAAc,KACvCa,EAAQC,GAAK,aACbD,EAAQZ,MAAMc,WAAa,MAC3BF,EAAQG,YAAe,GAAElB,EAAc,SAEvC,MAAMmB,EAASrD,SAASoC,cAAc,KACtCiB,EAAOH,GAAK,YACZG,EAAOhB,MAAMiB,UAAY,UACzBD,EAAOD,YAAe,IAAGlB,EAAa,MAAEW,QAAQ,KAEhD,MAAMU,EAAcvD,SAASoC,cAAc,KAC3CmB,EAAYL,GAAK,aACjBK,EAAYlB,MAAMiB,UAAY,UAC9BC,EAAYH,YAAe,GAAET,EAAWT,EAAyB,qBAE7DA,EAAyB,kBAAI,IAC/BmB,EAAOhB,MAAMmB,MAAQ,MACrBD,EAAYlB,MAAMmB,MAAQ,OAG5B,MAAMC,EAAYzD,SAASoC,cAAc,KACzCqB,EAAUP,GAAK,eACfO,EAAUL,YAAe,IAAGzC,EAASkC,QAAQ,KAE7C,MAAMa,EAAO1D,SAASoC,cAAc,KACpCsB,EAAKR,GAAK,UACVQ,EAAKN,YAAe,GAAET,EAAWK,KAC7BA,EAAM,IACRS,EAAUpB,MAAMmB,MAAQ,MACxBE,EAAKrB,MAAMmB,MAAQ,OAIrB,MAAMG,EAAa3D,SAASoC,cAAc,UAC1CuB,EAAWP,YAAc,IACzBO,EAAWC,iBAAiB,SAAS,WACrC,MAAMC,EAAQnF,EAASoF,QAAQ5B,EAAc,SAC5B,IAAX2B,IACFnF,EAASqF,OAAOF,EAAO,UAChBlF,EAAeuD,EAAc,eAC7BtD,EAASsD,EAAc,SAEhChC,EAAQ6B,YAAYI,GACpBhC,IAkBJpB,iBAEE,IAAIiF,EAAgB,EAChBC,EAAkB,EAClBC,EAAoB,EACxB,IAAK,MAAMjF,KAAUkF,OAAOC,KAAKzF,GAAiB,CAChD,MAAMuC,QAAalC,EAASC,GAC5B,GAAIiC,GAAQA,EAAKT,OAAS,EAAG,CAC3B,MAAM4D,EAAenD,EAAK,GAAGN,MAC7BoD,IAAkBK,EAAe1F,EAAeM,IAAWL,EAASK,GACpEgF,GAAmBrF,EAASK,GAAUN,EAAeM,GACrDiF,GAAqBtF,EAASK,GAAUoF,CAC1C,CACF,CAIA,MAAMC,EAAyD,KAA5CJ,EAAoBD,EAAmB,GAC1DlE,QAAQwE,IAAI,WAAWD,GAGvB,MAAME,EAAcxE,SAASC,eAAe,eAC5CuE,EAAY3C,UAAY,GAKxB,MAAM4C,EAAYzE,SAASoC,cAAc,KACzCqC,EAAUvB,GAAK,YACfuB,EAAUpC,MAAMc,WAAa,MAC7BsB,EAAUrB,YAAe,mBAAkBY,EAAcnB,QAAQ,KAEjE,MAAM6B,EAAa1E,SAASoC,cAAc,KAC1CsC,EAAWxB,GAAK,aAChBwB,EAAWrC,MAAMsC,UAAY,MAC7BD,EAAWtB,YAAe,GAAEkB,EAASzB,QAAQ,MAE7C2B,EAAYI,YAAYH,GACxBD,EAAYI,YAAYF,EAG1B,CA1DIG,EAGF,IAEA1C,EAAKyC,YAAYjB,GACjBxB,EAAKyC,YAAYlC,GACjBP,EAAKyC,YAAY3B,GACjBd,EAAKyC,YAAYvB,GACjBlB,EAAKyC,YAAYrB,GACjBpB,EAAKyC,YAAYnB,GACjBtB,EAAKyC,YAAYlB,GACjBxD,EAAQ0E,YAAYzC,GAEbD,EAAa,KACtB,CAgFM4C,CADiBxF,KAAKC,MAAMH,aAAaC,QAAQ4C,IAC1B,IAEzB9B,GACJ,CAsDA4E,E","sources":["webpack://js-project/./src/index.js"],"sourcesContent":["let tikerArr = [];\nlet purchasePrices = {};\nlet quanties = {};\nlet myChart;\nlet colorIndex = 0;\nconst colors = ['#45ffbc', '#e3ffa8', '#a6a6a6', '#f6cd61','#aec993'];\n\nasync function apiFetch(symbol) {\n  const url = `https://financialmodelingprep.com/api/v3/quote/${symbol}?apikey=9d63fd6e1909cca85846e3cc209`;\n\n  const storedData = localStorage.getItem(`${symbol}`);\n  if (storedData) {\n    return JSON.parse(storedData);\n  }\n\n\n  try {\n    const response = await fetch(url);\n    const result = await response.json();\n    localStorage.setItem(`${symbol}`, JSON.stringify(result));\n    return result;    \n  } catch(error) {\n    console.error(error);\n    return null;\n  }\n}\n\nasync function apiInput(symbol, purchasePrice, quantity) {\n  const data = await apiFetch(symbol); \n  if (data.length > 0) {\n    purchasePrices[symbol] = purchasePrice;\n    quanties[symbol] = quantity;\n    localStorage.setItem('purchasePrices', JSON.stringify(purchasePrices));\n    localStorage.setItem('quantities', JSON.stringify(quanties))\n\n    return parseFloat(data[0].price);\n  } \n}\nconst contentDiv = document.getElementById('content');\nconst tileDiv = document.getElementById('stockTiles');\n\nfunction displayData(data) { \n  // console.log('display is passed with', data);\n  const stock = data[0];\n  const symbol = document.createElement('span'); \n  const tile = document.createElement('div');\n  // tile.style.border = '1px solid';\n  tile.style.margin = '5px';\n  tile.style.padding ='1px';\n  tile.style.borderRadius = '8px';\n  tile.style.width = '150px';\n  tile.style.backgroundColor = colors[colorIndex % colors.length];\n  colorIndex++;\n  const info = document.createElement('span');\n\n  // conditional format\n  const percentChg = function (percent) {\n    if (percent > 0) {\n      return `⬆${percent.toFixed(2)}%`\n    } else {\n      return `⬇${percent.toFixed(2)}%`\n    }\n  }\n\n  \n  const purchasePrice = purchasePrices[stock['symbol']];\n  const quantity = quanties[stock['symbol']];\n  const gainLoss =  (stock['price'] - purchasePrice) * quantity;\n  const roi = (stock['price']/purchasePrice - 1) * 100;\n  \n  // Create separate elements for each piece of info\n  const symbolP = document.createElement('p');\n  symbolP.id = \"symbolInfo\";\n  symbolP.style.fontWeight = \"600\";\n  symbolP.textContent = `${stock['symbol']}`;\n  \n  const priceP = document.createElement('p');\n  priceP.id = \"priceInfo\";\n  priceP.style.fontStyle = \"oblique\";\n  priceP.textContent = `$${stock['price'].toFixed(2)}`;\n  \n  const percentChgP = document.createElement('p');\n  percentChgP.id = \"changeInfo\";\n  percentChgP.style.fontStyle = \"oblique\";\n  percentChgP.textContent = `${percentChg(stock['changesPercentage'])}`;\n  \n  if (stock['changesPercentage'] < 0) {\n    priceP.style.color = \"red\";\n    percentChgP.style.color = 'red';\n  } \n  \n  const gainLossP = document.createElement('p');\n  gainLossP.id = \"gainLossInfo\";\n  gainLossP.textContent = `$${gainLoss.toFixed(2)}`;\n  \n  const roiP = document.createElement('p');\n  roiP.id = \"roiInfo\";\n  roiP.textContent = `${percentChg(roi)}`;\n  if (roi < 0) {\n    gainLossP.style.color = \"red\";\n    roiP.style.color = 'red';\n  } \n  \n  //delete button\n  const deleteTile = document.createElement('button');\n  deleteTile.textContent = '-';\n  deleteTile.addEventListener('click', function() {\n  const index = tikerArr.indexOf(stock['symbol']);\n    if (index !== -1) {\n      tikerArr.splice(index, 1);\n      delete purchasePrices[stock['symbol']];\n      delete quanties[stock['symbol']];\n    }\n    tileDiv.removeChild(tile);\n    buildChart();\n    updateTotalGainLossAndROI();\n    \n    \n  });\n  // append \n  tile.appendChild(deleteTile);\n  tile.appendChild(info);\n  tile.appendChild(symbolP);\n  tile.appendChild(priceP);\n  tile.appendChild(percentChgP);\n  tile.appendChild(gainLossP);\n  tile.appendChild(roiP);\n  tileDiv.appendChild(tile);\n\n  return stock['price'];\n}\n\nasync function updateTotalGainLossAndROI() {\n  // Calculate total gain/loss and ROI\n  let totalGainLoss = 0;\n  let totalInvestment = 0;\n  let totalCurrentValue = 0;\n  for (const symbol of Object.keys(purchasePrices)) {\n    const data = await apiFetch(symbol);\n    if (data && data.length > 0) {\n      const currentPrice = data[0].price;\n      totalGainLoss += (currentPrice - purchasePrices[symbol]) * quanties[symbol];\n      totalInvestment += quanties[symbol] * purchasePrices[symbol];\n      totalCurrentValue += quanties[symbol] * currentPrice;\n    }\n  }\n  // console.log ('totalGainLoss', totalGainLoss) // gets back value\n\n  // Calculate ROI\n  const totalROI = ((totalCurrentValue / totalInvestment) - 1) * 100;\n  console.log('totalROI',totalROI)\n\n  // summary tile\n  const summaryTile = document.getElementById('summaryTile');\n  summaryTile.innerHTML = \"\";\n  // console.log(summaryTile);\n  // summaryTile.textContent = `Total Gain/Loss: $${totalGainLoss.toFixed(2)} Total ROI: ${totalROI.toFixed(2)}%`;\n\n\n  const summaryGl = document.createElement('p');\n  summaryGl.id = \"summaryGL\";\n  summaryGl.style.fontWeight = \"800\";\n  summaryGl.textContent = `Gain/Loss:     $${totalGainLoss.toFixed(2)}`;\n\n  const summaryROI = document.createElement('p');\n  summaryROI.id = \"summaryROI\";\n  summaryROI.style.marginTop = '5px';\n  summaryROI.textContent = `${totalROI.toFixed(2)}%`;\n\n  summaryTile.appendChild(summaryGl);\n  summaryTile.appendChild(summaryROI);\n\n\n}\n\n\nasync function onSubmitForm() {\n  const ticker = document.getElementById('ticker').value;\n  const purchasePrice = parseFloat(document.getElementById('purchasePrice').value);\n  const quantity = parseFloat(document.getElementById('quantity').value);\n  \n  if (tikerArr.includes(ticker)) {\n    console.log('This ticker is already added'); \n    return;\n  }\n  \n  document.getElementById('estimatorForm').style.backgroundColor = '#e3ffa8';\n  const currentPrice = await apiInput(ticker, purchasePrice, quantity);\n  if (currentPrice && ticker.trim() !=='') {\n    const gainLoss =  (currentPrice - purchasePrice) * quantity;\n    const roi = (currentPrice/purchasePrice -1).toFixed(2)*100;\n\n    \n\n    tikerArr.push(ticker)\n    await printTile();  // Display the tile\n    await updateTotalGainLossAndROI();\n\n  } else {\n    console.log('failed to fetch current price');\n  }  \n}\n\nfunction printTile () {    // render all tiles\n    document.getElementById('stockTiles').innerHTML = \"\";\n    while (tileDiv.firstChild ) {\n      tileDiv.removeChild(tileDiv.firstChild)\n    }\n    tikerArr?.forEach ((ticker) => {\n      let tickerData = JSON.parse(localStorage.getItem(ticker));\n      displayData(tickerData);\n    });\n    buildChart();\n}\n\nasync function buildChart() {\n  if(myChart) {\n    myChart.destroy();\n  }\n\n  let tickers = tikerArr;\n  let gainLosses = [];\n  let labels = [];\n  const purchasePrices = JSON.parse(localStorage.getItem('purchasePrices'));\n  const quanties = JSON.parse(localStorage.getItem('quantities'));\n\n  for (let i = 0; i < tickers.length; i++) {\n    let tickerData = JSON.parse(localStorage.getItem(tickers[i]));\n    if (tickerData && tickerData.length > 0) {\n      let currentPrice = tickerData[0].price;\n      let purchasePrice = purchasePrices[tickers[i]];\n      let quantity = quanties[tickers[i]];\n      let gainLoss = (currentPrice - purchasePrice) * quantity;\n      labels.push(tickerData[0].symbol);\n      gainLosses.push(gainLoss);\n    }\n  }\n\n  const ctx = document.getElementById('myChart').getContext('2d');\n  // ctx.canvas.width = 100;\n  // ctx.canvas.height = 200;\n\n  myChart = new Chart(ctx, {\n    type: 'bar', \n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Gain/Loss in USD',\n        data: gainLosses,\n        backgroundColor: 'rgba(180,255,228,1)',\n        borderColor:'rgba(75,192,192,1)',\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      // maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true,\n        }\n      }\n    },\n    backgroundColor:'black'\n  });\n}\n\nprintTile();\n"],"names":["myChart","tikerArr","purchasePrices","quanties","colorIndex","colors","async","apiFetch","symbol","url","storedData","localStorage","getItem","JSON","parse","response","fetch","result","json","setItem","stringify","error","console","document","getElementById","tileDiv","buildChart","destroy","tickers","gainLosses","labels","i","length","tickerData","gainLoss","price","push","ctx","getContext","Chart","type","data","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","innerHTML","firstChild","removeChild","forEach","ticker","stock","tile","createElement","style","margin","padding","borderRadius","width","info","percentChg","percent","toFixed","purchasePrice","quantity","roi","symbolP","id","fontWeight","textContent","priceP","fontStyle","percentChgP","color","gainLossP","roiP","deleteTile","addEventListener","index","indexOf","splice","totalGainLoss","totalInvestment","totalCurrentValue","Object","keys","currentPrice","totalROI","log","summaryTile","summaryGl","summaryROI","marginTop","appendChild","updateTotalGainLossAndROI","displayData","printTile"],"sourceRoot":""}