{"version":3,"file":"main.js","mappings":"qCAEA,IAGIA,EAHAC,EAAW,GACXC,EAAiB,CAAC,EAClBC,EAAW,CAAC,EAEZC,EAAa,EACjB,MAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAU,WAS3DC,eAAeC,EAASC,GACtB,MAAMC,EAAO,kDAAiDD,4CAE9D,IACE,MAAME,QAAiBC,MAAMF,GACvBG,QAAeF,EAASG,OAG9B,OAFAC,QAAQC,IAAI,QAASH,GAEdA,CACT,CAAE,MAAMI,GAEN,OADAF,QAAQE,MAAMA,GACP,IACT,CACF,EC1BAV,eAA0BE,GAGtB,IACE,MAAME,QAAiBC,MAHZ,8FAKX,aADqBD,EAASG,MAEhC,CAAE,MAAMG,GAEN,OADAF,QAAQE,MAAMA,GACP,IACT,CACJ,EDLAC,GAAkBC,MAAKN,IACrBE,QAAQC,IAAI,UAAWH,EAAO,IAC7BO,OAAMH,IACPF,QAAQE,MAAM,8BAA+BA,EAAM,IAiClCI,SAASC,eAAe,WAA3C,MACMC,EAAUF,SAASC,eAAe,cAExC,SAASE,EAAYC,GACnBV,QAAQC,IAAI,yBAA0BS,GACtC,MAAMC,EAAQD,EAAK,GAEbE,GADSN,SAASO,cAAc,QACzBP,SAASO,cAAc,QAEpCD,EAAKE,MAAMC,OAAS,MACpBH,EAAKE,MAAME,QAAS,MACpBJ,EAAKE,MAAMG,aAAe,MAC1BL,EAAKE,MAAMI,MAAQ,QACnBN,EAAKE,MAAMK,gBAAkB5B,EAAOD,EAAaC,EAAO6B,QACxD9B,IACA,MAAM+B,EAAOf,SAASO,cAAc,QAG9BS,EAAa,SAAUC,GAC3B,OAAIA,EAAU,EACJ,IAAGA,EAAQC,QAAQ,MAEnB,IAAGD,EAAQC,QAAQ,KAE/B,EAEMC,EAAgBrC,EAAeuB,EAAc,QAC7Ce,EAAWrC,EAASsB,EAAc,QAClCgB,GAAahB,EAAa,MAAIc,GAAiBC,EAC/CE,EAA2C,KAApCjB,EAAa,MAAEc,EAAgB,GAGtCI,EAAUvB,SAASO,cAAc,KACvCgB,EAAQC,GAAK,aACbD,EAAQf,MAAMiB,WAAa,MAC3BF,EAAQG,YAAe,GAAErB,EAAc,SAEvC,MAAMsB,EAAS3B,SAASO,cAAc,KACtCoB,EAAOH,GAAK,YACZG,EAAOnB,MAAMoB,UAAY,UACzBD,EAAOD,YAAe,IAAGrB,EAAa,MAAEwB,oBAAeC,EAAW,CAACC,sBAAuB,EAAGC,sBAAuB,MAEpH,MAAMC,EAAcjC,SAASO,cAAc,KAC3C0B,EAAYT,GAAK,aACjBS,EAAYzB,MAAMoB,UAAY,UAC9BK,EAAYP,YAAe,GAAEV,EAAWX,EAAyB,qBAE7DA,EAAyB,kBAAI,IAC/BsB,EAAOnB,MAAM0B,MAAQ,MACrBD,EAAYzB,MAAM0B,MAAQ,OAG5B,MAAMC,EAAYnC,SAASO,cAAc,KACzC4B,EAAUX,GAAK,eACfW,EAAUT,YAAe,IAAGL,EAASQ,oBAAeC,EAAW,CAACC,sBAAuB,EAAGC,sBAAuB,MAEjH,MAAMI,EAAOpC,SAASO,cAAc,KACpC6B,EAAKZ,GAAK,UACVY,EAAKV,YAAe,GAAEV,EAAWM,KAC7BA,EAAM,IACRa,EAAU3B,MAAM0B,MAAQ,MACxBE,EAAK5B,MAAM0B,MAAQ,OAIrB,MAAMG,EAAarC,SAASO,cAAc,UAyB1C,OAxBA8B,EAAWX,YAAc,IACzBW,EAAWC,iBAAiB,SAAS,WACrC,MAAMC,EAAQ1D,EAAS2D,QAAQnC,EAAc,SAC5B,IAAXkC,IACF1D,EAAS4D,OAAOF,EAAO,UAChBzD,EAAeuB,EAAc,eAC7BtB,EAASsB,EAAc,SAEhCH,EAAQwC,YAAYpC,GACpBqC,IAkBJzD,iBAEE,IAAI0D,EAAgB,EAChBC,EAAa,EACbC,EAAkB,EAClBC,EAAoB,EACxB,IAAK,MAAM3D,KAAU4D,OAAOC,KAAKnE,GAAiB,CAChD,MAAMsB,QAAajB,EAASC,GAC5B,GAAIgB,GAAQA,EAAKU,OAAS,EAAG,CAC3B,MAAMoC,EAAe9C,EAAK,GAAG+C,MAC7BN,GAAcK,EAAenE,EAASK,GACtCwD,IAAkBM,EAAepE,EAAeM,IAAWL,EAASK,GACpE0D,GAAmB/D,EAASK,GAAUN,EAAeM,GACrD2D,GAAqBhE,EAASK,GAAU8D,CAC1C,CACF,CAIA,MAAME,EAAyD,KAA5CL,EAAoBD,EAAmB,GAC1DpD,QAAQC,IAAI,WAAWyD,GAGvB,MAAMC,EAAcrD,SAASC,eAAe,eAC5CoD,EAAYC,UAAY,GAIxB,MAAMC,EAAevD,SAASO,cAAc,KAC5CgD,EAAa/B,GAAK,eAClB+B,EAAa/C,MAAMiB,WAAa,MAChC8B,EAAa/C,MAAME,QAAU,MAC7B6C,EAAa/C,MAAMgD,SAAW,OAC9BD,EAAa7B,YAAe,IAAGmB,EAAWhB,oBAAeC,EAAW,CAACC,sBAAuB,EAAGC,sBAAuB,MAEtH,MAAMyB,EAAYzD,SAASO,cAAc,KACzCkD,EAAUjC,GAAK,YAEfiC,EAAUH,UAAa,+BAA8BV,EAAcf,oBAAeC,EAAW,CAACC,sBAAuB,EAAGC,sBAAuB,MAE/I,MAAM0B,EAAa1D,SAASO,cAAc,KAC1CmD,EAAWlC,GAAK,aAChBkC,EAAWlD,MAAMmD,UAAY,MAC7BD,EAAWhC,YAAe,GAAE0B,EAASlC,QAAQ,MACzCkC,EAAW,IACbK,EAAUjD,MAAM0B,MAAQ,MACxBwB,EAAWlD,MAAM0B,MAAQ,OAG3B,MAAM0B,EAAS5D,SAASO,cAAc,KACtCqD,EAAOpC,GAAK,SACZoC,EAAOpD,MAAMgD,SAAW,OACxBI,EAAOpD,MAAMoB,UAAY,SACzBgC,EAAON,UAAY,gDAKnBD,EAAYQ,YAAYN,GACxBF,EAAYQ,YAAYJ,GACxBJ,EAAYQ,YAAYH,GACxBL,EAAYQ,YAAYD,EAAOE,WAAU,GAE3C,CAhFIC,EAGF,IAEAzD,EAAKuD,YAAYxB,GACjB/B,EAAKuD,YAAY9C,GACjBT,EAAKuD,YAAYtC,GACjBjB,EAAKuD,YAAYlC,GACjBrB,EAAKuD,YAAY5B,GACjB3B,EAAKuD,YAAY1B,GACjB7B,EAAKuD,YAAYzB,GACjBlC,EAAQ2D,YAAYvD,GAEbD,EAAa,KACtB,CAyGAnB,eAAeyD,IACV/D,GACDA,EAAQoF,UAGV,IAAIC,EAAUpF,EACVqF,EAAa,GACbC,EAAS,GAIb,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQnD,OAAQsD,IAAK,CACvC,IAAIC,QAAmBlF,EAAS8E,EAAQG,IACxC,GAAIC,GAAcA,EAAWvD,OAAS,EAAG,CACvC,IAGIO,GAHegD,EAAW,GAAGlB,MACbrE,EAAemF,EAAQG,KAC5BrF,EAASkF,EAAQG,IAEhCD,EAAOG,KAAKD,EAAW,GAAGjF,QAC1B8E,EAAWI,KAAKjD,EAClB,CACF,CAEA,MAAMkD,EAAMvE,SAASC,eAAe,WAAWuE,WAAW,MAG1D5F,EAAU,IAAI6F,MAAMF,EAAK,CACvBG,KAAM,MACNtE,KAAM,CACJ+D,OAAQA,EACRQ,SAAU,CAAC,CACTC,MAAO,mBACPxE,KAAM8D,EACNW,cAAe,EAEfC,gBAAgB,GAChBC,gBAAgB,GAChBlE,gBAAiB,sBACjBmE,YAAY,qBACZC,YAAa,KAGjBC,QAAS,CACPC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,EAAG,CACDC,aAAa,GAEfC,EAAG,CACDC,KAAM,CACJC,QAAQ,OAOpB,EAtEAxG,iBAEI,IADAc,SAASC,eAAe,cAAcqD,UAAY,GAC3CpD,EAAQyF,YACbzF,EAAQwC,YAAYxC,EAAQyF,YAE9B,IAAK,MAAMC,KAAU/G,EAEnBsB,QADuBhB,EAASyG,IAGlCjD,GACJ,CA+DAkD,E","sources":["webpack://js-project/./src/index.js","webpack://js-project/./src/scripts/fetch.js"],"sourcesContent":["import { stockPrice } from './scripts/fetch.js';\n\nlet tikerArr = [];\nlet purchasePrices = {};\nlet quanties = {};\nlet myChart;\nlet colorIndex = 0;\nconst colors = ['#45ffbc', '#e3ffa8', '#a6a6a6', '#f6cd61','#aec993'];\n\nstockPrice('JPM').then(result => {\n  console.log(\"Result:\", result);\n}).catch(error => {\n  console.error(\"Error fetching stock price:\", error);\n});\n\n\nasync function apiFetch(symbol) {\n  const url = `https://financialmodelingprep.com/api/v3/quote/${symbol}?apikey=f43645c7dcc9b1fe95e501b844e1c963`;\n\n  try {\n    const response = await fetch(url);\n    const result = await response.json();\n    console.log('fetch', result)\n    // localStorage.setItem(`${symbol}`, JSON.stringify(result));\n    return result;    \n  } catch(error) {\n    console.error(error);\n    return null;\n  }\n}\n\nasync function apiInput(symbol, purchasePrice, quantity) {\n  const data = await apiFetch(symbol); \n  console.log('data', data[0])\n  if (data.length > 0) {\n    purchasePrices[symbol] = purchasePrice;\n    quanties[symbol] = quantity;\n\n    // console.log()\n    // localStorage.setItem('purchasePrices', JSON.stringify(purchasePrices));\n    // localStorage.setItem('quantities', JSON.stringify(quanties))\n\n    return parseFloat(data[0].price);\n  } \n}\nconst contentDiv = document.getElementById('content');\nconst tileDiv = document.getElementById('stockTiles');\n\nfunction displayData(data) { \n  console.log('display is passed with', data);\n  const stock = data[0];\n  const symbol = document.createElement('span'); \n  const tile = document.createElement('div');\n  // tile.style.border = '1px solid';\n  tile.style.margin = '5px';\n  tile.style.padding ='1px';\n  tile.style.borderRadius = '8px';\n  tile.style.width = '150px';\n  tile.style.backgroundColor = colors[colorIndex % colors.length];\n  colorIndex++;\n  const info = document.createElement('span');\n\n  // conditional format\n  const percentChg = function (percent) {\n    if (percent > 0) {\n      return `⬆${percent.toFixed(2)}%`\n    } else {\n      return `⬇${percent.toFixed(2)}%`\n    }\n  }\n   \n  const purchasePrice = purchasePrices[stock['symbol']];\n  const quantity = quanties[stock['symbol']];\n  const gainLoss =  (stock['price'] - purchasePrice) * quantity;\n  const roi = (stock['price']/purchasePrice - 1) * 100;\n  \n  // Create separate elements for each piece of info\n  const symbolP = document.createElement('p');\n  symbolP.id = \"symbolInfo\";\n  symbolP.style.fontWeight = \"600\";\n  symbolP.textContent = `${stock['symbol']}`;\n  \n  const priceP = document.createElement('p');\n  priceP.id = \"priceInfo\";\n  priceP.style.fontStyle = \"oblique\";\n  priceP.textContent = `$${stock['price'].toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n  \n  const percentChgP = document.createElement('p');\n  percentChgP.id = \"changeInfo\";\n  percentChgP.style.fontStyle = \"oblique\";\n  percentChgP.textContent = `${percentChg(stock['changesPercentage'])}`;\n  \n  if (stock['changesPercentage'] < 0) {\n    priceP.style.color = \"red\";\n    percentChgP.style.color = 'red';\n  } \n  \n  const gainLossP = document.createElement('p');\n  gainLossP.id = \"gainLossInfo\";\n  gainLossP.textContent = `$${gainLoss.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n  \n  const roiP = document.createElement('p');\n  roiP.id = \"roiInfo\";\n  roiP.textContent = `${percentChg(roi)}`;\n  if (roi < 0) {\n    gainLossP.style.color = \"red\";\n    roiP.style.color = 'red';\n  } \n  \n  //delete button\n  const deleteTile = document.createElement('button');\n  deleteTile.textContent = '-';\n  deleteTile.addEventListener('click', function() {\n  const index = tikerArr.indexOf(stock['symbol']);\n    if (index !== -1) {\n      tikerArr.splice(index, 1);\n      delete purchasePrices[stock['symbol']];\n      delete quanties[stock['symbol']];\n    }\n    tileDiv.removeChild(tile);\n    buildChart();\n    updateTotalGainLossAndROI();\n    \n    \n  });\n  // append \n  tile.appendChild(deleteTile);\n  tile.appendChild(info);\n  tile.appendChild(symbolP);\n  tile.appendChild(priceP);\n  tile.appendChild(percentChgP);\n  tile.appendChild(gainLossP);\n  tile.appendChild(roiP);\n  tileDiv.appendChild(tile);\n\n  return stock['price'];\n}\n\nasync function updateTotalGainLossAndROI() {\n  // Calculate total gain/loss and ROI\n  let totalGainLoss = 0;\n  let totalWorth = 0;\n  let totalInvestment = 0;\n  let totalCurrentValue = 0;\n  for (const symbol of Object.keys(purchasePrices)) {\n    const data = await apiFetch(symbol);\n    if (data && data.length > 0) {\n      const currentPrice = data[0].price;\n      totalWorth += currentPrice * quanties[symbol];\n      totalGainLoss += (currentPrice - purchasePrices[symbol]) * quanties[symbol];\n      totalInvestment += quanties[symbol] * purchasePrices[symbol];\n      totalCurrentValue += quanties[symbol] * currentPrice;\n    } \n  }\n  // console.log ('totalGainLoss', totalGainLoss) // gets back value\n\n  // Calculate ROI\n  const totalROI = ((totalCurrentValue / totalInvestment) - 1) * 100;\n  console.log('totalROI',totalROI)\n\n  // summary tile\n  const summaryTile = document.getElementById('summaryTile');\n  summaryTile.innerHTML = \"\";\n  // console.log(summaryTile);\n  // summaryTile.textContent = `Total Gain/Loss: $${totalGainLoss.toFixed(2)} Total ROI: ${totalROI.toFixed(2)}%`;\n \n  const summaryTotal = document.createElement('p');\n  summaryTotal.id = \"summaryTotal\";\n  summaryTotal.style.fontWeight = \"800\";\n  summaryTotal.style.padding = \"1px\";\n  summaryTotal.style.fontSize = \"20px\"\n  summaryTotal.textContent = `$${totalWorth.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n  \n  const summaryGl = document.createElement('p');\n  summaryGl.id = \"summaryGL\";\n  // summaryGl.style.fontWeight = \"800\";\n  summaryGl.innerHTML = `Gain/Loss<sup>*</sup>:     $${totalGainLoss.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n  \n  const summaryROI = document.createElement('p');\n  summaryROI.id = \"summaryROI\";\n  summaryROI.style.marginTop = '5px';\n  summaryROI.textContent = `${totalROI.toFixed(2)}%`;\n  if (totalROI < 0) {\n    summaryGl.style.color = \"red\";\n    summaryROI.style.color = 'red';\n  } \n\n  const footer = document.createElement('p');\n  footer.id = 'footer';\n  footer.style.fontSize = '10px';\n  footer.style.fontStyle = 'italic';\n  footer.innerHTML = \"<sup>*</sup> not include tax and related fees\"\n  \n  \n  \n  \n  summaryTile.appendChild(summaryTotal); \n  summaryTile.appendChild(summaryGl);\n  summaryTile.appendChild(summaryROI);\n  summaryTile.appendChild(footer.cloneNode(true));\n\n}\n\n\nasync function onSubmitForm() {\n  const ticker = document.getElementById('ticker').value;\n  const purchasePrice = parseFloat(document.getElementById('purchasePrice').value);\n  const quantity = parseFloat(document.getElementById('quantity').value);\n  \n  if (tikerArr.includes(ticker)) {\n    console.log('This ticker is already added'); \n    return;\n  }\n  \n  document.getElementById('estimatorForm').style.backgroundColor = '#e3ffa8';\n  const currentPrice = await apiInput(ticker, purchasePrice, quantity);\n  if (currentPrice && ticker.trim() !=='') {\n    const gainLoss =  (currentPrice - purchasePrice) * quantity;\n    const roi = (currentPrice/purchasePrice -1).toFixed(2)*100;\n\n    tikerArr.push(ticker)\n    await printTile();  // Display the tile\n    await updateTotalGainLossAndROI();\n\n  } else {\n    console.log('failed to fetch current price');\n  }  \n}\n\nasync function printTile () {    // render all tiles\n    document.getElementById('stockTiles').innerHTML = \"\";\n    while (tileDiv.firstChild ) {\n      tileDiv.removeChild(tileDiv.firstChild)\n    }\n    for (const ticker of tikerArr) {\n      let tickerData = await apiFetch(ticker);\n      displayData(tickerData);\n    };\n    buildChart();\n}\n\nasync function buildChart() {\n  if(myChart) {\n    myChart.destroy();\n  }\n\n  let tickers = tikerArr;\n  let gainLosses = [];\n  let labels = [];\n  // const purchasePrices = JSON.parse(localStorage.getItem('purchasePrices'));\n  // const quanties = JSON.parse(localStorage.getItem('quantities'));\n\n  for (let i = 0; i < tickers.length; i++) {\n    let tickerData = await apiFetch(tickers[i]);\n    if (tickerData && tickerData.length > 0) {\n      let currentPrice = tickerData[0].price;\n      let purchasePrice = purchasePrices[tickers[i]];\n      let quantity = quanties[tickers[i]];\n      let gainLoss = (currentPrice - purchasePrice) * quantity;\n      labels.push(tickerData[0].symbol);\n      gainLosses.push(gainLoss);\n    }\n  }\n\n  const ctx = document.getElementById('myChart').getContext('2d');\n\n\n  myChart = new Chart(ctx, {\n    type: 'bar', \n    data: {\n      labels: labels,\n      datasets: [{\n        label: 'Gain/Loss in USD',\n        data: gainLosses,\n        barPercentage: 2,\n        // barThickness: 6,\n        maxBarThickness:20,\n        minBarThickness:10,\n        backgroundColor: 'rgba(180,255,228,1)',\n        borderColor:'rgba(75,192,192,1)',\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: false,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n        x: {\n          grid: {\n            offset: true\n          }\n        }\n      }\n    },\n    // backgroundColor:'black'\n  });\n}\n\n\nprintTile();\n","\nconst API_KEY = \"f43645c7dcc9b1fe95e501b844e1c963\"\n\nasync function stockPrice(symbol) {\n    const url = `https://financialmodelingprep.com/api/v3/quote/${symbol}?apikey=${API_KEY}`;\n  \n    try {\n      const response = await fetch(url);\n      const result = await response.json();\n      return result;    \n    } catch(error) {\n      console.error(error);\n      return null;\n    }\n}\n\n\n// async function stockSearch(ticker,name) {\n    //     const url = `https://financialmodelingprep.com/api/v3/search?query=AA&limit=10&exchange=NASDAQ&apikey=${API_KEY}`\n    \n    //     try {\n        //         const response = await fetch(url);\n        //         const result = await response.json();\n        //         return result;\n        //     } catch (error) {\n            //         console.log(error);\n            //         return null;\n            //     }\n            // }\n            \n            // export default stockSearch;\n            \n            \nexport {stockPrice};"],"names":["myChart","tikerArr","purchasePrices","quanties","colorIndex","colors","async","apiFetch","symbol","url","response","fetch","result","json","console","log","error","stockPrice","then","catch","document","getElementById","tileDiv","displayData","data","stock","tile","createElement","style","margin","padding","borderRadius","width","backgroundColor","length","info","percentChg","percent","toFixed","purchasePrice","quantity","gainLoss","roi","symbolP","id","fontWeight","textContent","priceP","fontStyle","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","percentChgP","color","gainLossP","roiP","deleteTile","addEventListener","index","indexOf","splice","removeChild","buildChart","totalGainLoss","totalWorth","totalInvestment","totalCurrentValue","Object","keys","currentPrice","price","totalROI","summaryTile","innerHTML","summaryTotal","fontSize","summaryGl","summaryROI","marginTop","footer","appendChild","cloneNode","updateTotalGainLossAndROI","destroy","tickers","gainLosses","labels","i","tickerData","push","ctx","getContext","Chart","type","datasets","label","barPercentage","maxBarThickness","minBarThickness","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","x","grid","offset","firstChild","ticker","printTile"],"sourceRoot":""}